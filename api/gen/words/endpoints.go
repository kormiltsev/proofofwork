// Code generated by goa v3.16.2, DO NOT EDIT.
//
// words endpoints
//
// Command:
// $ goa gen github.com/kormiltsev/proofofwork/api/design -o ./api/

package words

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "words" service endpoints.
type Endpoints struct {
	Words   goa.Endpoint
	Request goa.Endpoint
}

// NewEndpoints wraps the methods of the "words" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Words:   NewWordsEndpoint(s),
		Request: NewRequestEndpoint(s),
	}
}

// Use applies the given middleware to all the "words" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Words = m(e.Words)
	e.Request = m(e.Request)
}

// NewWordsEndpoint returns an endpoint function that calls the method "words"
// of service "words".
func NewWordsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*WordsPayload)
		res, err := s.Words(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedWordsResult(res, "default")
		return vres, nil
	}
}

// NewRequestEndpoint returns an endpoint function that calls the method
// "request" of service "words".
func NewRequestEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		res, err := s.Request(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedWordsTask(res, "default")
		return vres, nil
	}
}
