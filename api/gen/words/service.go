// Code generated by goa v3.16.2, DO NOT EDIT.
//
// words service
//
// Command:
// $ goa gen github.com/kormiltsev/proofofwork/api/design -o ./api/

package words

import (
	"context"

	wordsviews "github.com/kormiltsev/proofofwork/api/gen/words/views"
)

// Service is the words service interface.
type Service interface {
	// Returns smartypents quote
	Words(context.Context, *WordsPayload) (res *WordsResult, err error)
	// First step for new quote, returns task
	Request(context.Context) (res *WordsTask, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "word-of-wisdom"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "words"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"words", "request"}

type BadRequestError struct {
	// Key to select a localized message
	MsgCode string
	// Detailed error message
	Msg string
	// Message attributes
	Attributes any
}

type ConflictError struct {
	// Key to select a localized message
	MsgCode string
	// Detailed error message
	Msg string
	// Message attributes
	Attributes any
}

type ForbiddenError struct {
	// Key to select a localized message
	MsgCode string
	// Detailed error message
	Msg string
	// Message attributes
	Attributes any
}

type InternalError struct {
	// Key to select a localized message
	MsgCode string
	// Detailed error message
	Msg string
	// Message attributes
	Attributes any
}

type NotFoundError struct {
	// Key to select a localized message
	MsgCode string
	// Detailed error message
	Msg string
	// Message attributes
	Attributes any
}

// WordsPayload is the payload type of the words service words method.
type WordsPayload struct {
	// Solution block
	Solution *string
}

// WordsResult is the result type of the words service words method.
type WordsResult struct {
	// Words of wisdome
	Quote *string
}

// WordsTask is the result type of the words service request method.
type WordsTask struct {
	// Previous hash
	Hash *string
	// Target difficulty
	Difficulty *int
}

// Error returns an error description.
func (e *BadRequestError) Error() string {
	return ""
}

// ErrorName returns "BadRequestError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequestError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "BadRequestError".
func (e *BadRequestError) GoaErrorName() string {
	return "bad_request"
}

// Error returns an error description.
func (e *ConflictError) Error() string {
	return ""
}

// ErrorName returns "ConflictError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ConflictError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ConflictError".
func (e *ConflictError) GoaErrorName() string {
	return "conflict"
}

// Error returns an error description.
func (e *ForbiddenError) Error() string {
	return ""
}

// ErrorName returns "ForbiddenError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ForbiddenError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ForbiddenError".
func (e *ForbiddenError) GoaErrorName() string {
	return "forbidden"
}

// Error returns an error description.
func (e *InternalError) Error() string {
	return ""
}

// ErrorName returns "InternalError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InternalError".
func (e *InternalError) GoaErrorName() string {
	return "internal"
}

// Error returns an error description.
func (e *NotFoundError) Error() string {
	return ""
}

// ErrorName returns "NotFoundError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFoundError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFoundError".
func (e *NotFoundError) GoaErrorName() string {
	return "not_found"
}

// NewWordsResult initializes result type WordsResult from viewed result type
// WordsResult.
func NewWordsResult(vres *wordsviews.WordsResult) *WordsResult {
	return newWordsResult(vres.Projected)
}

// NewViewedWordsResult initializes viewed result type WordsResult from result
// type WordsResult using the given view.
func NewViewedWordsResult(res *WordsResult, view string) *wordsviews.WordsResult {
	p := newWordsResultView(res)
	return &wordsviews.WordsResult{Projected: p, View: "default"}
}

// NewWordsTask initializes result type WordsTask from viewed result type
// WordsTask.
func NewWordsTask(vres *wordsviews.WordsTask) *WordsTask {
	return newWordsTask(vres.Projected)
}

// NewViewedWordsTask initializes viewed result type WordsTask from result type
// WordsTask using the given view.
func NewViewedWordsTask(res *WordsTask, view string) *wordsviews.WordsTask {
	p := newWordsTaskView(res)
	return &wordsviews.WordsTask{Projected: p, View: "default"}
}

// newWordsResult converts projected type WordsResult to service type
// WordsResult.
func newWordsResult(vres *wordsviews.WordsResultView) *WordsResult {
	res := &WordsResult{
		Quote: vres.Quote,
	}
	return res
}

// newWordsResultView projects result type WordsResult to projected type
// WordsResultView using the "default" view.
func newWordsResultView(res *WordsResult) *wordsviews.WordsResultView {
	vres := &wordsviews.WordsResultView{
		Quote: res.Quote,
	}
	return vres
}

// newWordsTask converts projected type WordsTask to service type WordsTask.
func newWordsTask(vres *wordsviews.WordsTaskView) *WordsTask {
	res := &WordsTask{
		Hash:       vres.Hash,
		Difficulty: vres.Difficulty,
	}
	return res
}

// newWordsTaskView projects result type WordsTask to projected type
// WordsTaskView using the "default" view.
func newWordsTaskView(res *WordsTask) *wordsviews.WordsTaskView {
	vres := &wordsviews.WordsTaskView{
		Hash:       res.Hash,
		Difficulty: res.Difficulty,
	}
	return vres
}
