// Code generated by goa v3.16.2, DO NOT EDIT.
//
// words HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/kormiltsev/proofofwork/api/design -o ./api/

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	words "github.com/kormiltsev/proofofwork/api/gen/words"
	wordsviews "github.com/kormiltsev/proofofwork/api/gen/words/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildWordsRequest instantiates a HTTP request object with method and path
// set to call the "words" service "words" endpoint
func (c *Client) BuildWordsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: WordsWordsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("words", "words", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeWordsRequest returns an encoder for requests sent to the words words
// server.
func EncodeWordsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*words.WordsPayload)
		if !ok {
			return goahttp.ErrInvalidType("words", "words", "*words.WordsPayload", v)
		}
		body := NewWordsRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("words", "words", err)
		}
		return nil
	}
}

// DecodeWordsResponse returns a decoder for responses returned by the words
// words endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeWordsResponse may return the following errors:
//   - "bad_request" (type *words.BadRequestError): http.StatusBadRequest
//   - "internal" (type *words.InternalError): http.StatusInternalServerError
//   - error: internal error
func DecodeWordsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body WordsOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("words", "words", err)
			}
			p := NewWordsResultViewOK(&body)
			view := "default"
			vres := &wordsviews.WordsResult{Projected: p, View: view}
			if err = wordsviews.ValidateWordsResult(vres); err != nil {
				return nil, goahttp.ErrValidationError("words", "words", err)
			}
			res := words.NewWordsResult(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body WordsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("words", "words", err)
			}
			err = ValidateWordsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("words", "words", err)
			}
			return nil, NewWordsBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body WordsInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("words", "words", err)
			}
			err = ValidateWordsInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("words", "words", err)
			}
			return nil, NewWordsInternal(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("words", "words", resp.StatusCode, string(body))
		}
	}
}

// BuildRequestRequest instantiates a HTTP request object with method and path
// set to call the "words" service "request" endpoint
func (c *Client) BuildRequestRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RequestWordsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("words", "request", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRequestResponse returns a decoder for responses returned by the words
// request endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeRequestResponse may return the following errors:
//   - "bad_request" (type *words.BadRequestError): http.StatusBadRequest
//   - "internal" (type *words.InternalError): http.StatusInternalServerError
//   - error: internal error
func DecodeRequestResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RequestOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("words", "request", err)
			}
			p := NewRequestWordsTaskOK(&body)
			view := "default"
			vres := &wordsviews.WordsTask{Projected: p, View: view}
			if err = wordsviews.ValidateWordsTask(vres); err != nil {
				return nil, goahttp.ErrValidationError("words", "request", err)
			}
			res := words.NewWordsTask(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body RequestBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("words", "request", err)
			}
			err = ValidateRequestBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("words", "request", err)
			}
			return nil, NewRequestBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body RequestInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("words", "request", err)
			}
			err = ValidateRequestInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("words", "request", err)
			}
			return nil, NewRequestInternal(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("words", "request", resp.StatusCode, string(body))
		}
	}
}
